from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from utils import keyboards

from aiogram.fsm.context import FSMContext
from utils.states import TechSupportState, UpdateTicketState
from utils.funcs import get_tariffs, get_tariff, create_tech_support_ticket, create_update_support_ticket, get_update_log, create_purchase_tariff, update_purchase_status, get_subscribe, activate_trial, generate_fork_message, get_promocodes, get_promocodes_status, retrieve_promocode, activate_promocode, get_activated_promocode
from core.constants import MANAGER, GROUP_ID
from utils.caching import cache_profile
from utils.parser import parse_fork
from core.constants import MAX_MONEY_FORK_URL, FORK_CHAT_ID
import datetime
import pytz

async def hello_message(callback: CallbackQuery, bot: Bot):
    try:
        await callback.message.delete()
        await bot.answer_callback_query(callback.id)
    except AttributeError:
        ...
    await bot.send_message(
        callback.from_user.id,
        '–ü—Ä–∏–≤–µ—Ç!\n\n'
        '–Ø –±–æ—Ç –ø–æ –ø–æ–∏—Å–∫—É –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –≤–∏–ª–æ–∫. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ –≤–∏–ª–∫–∏ –¥–ª—è –æ—Ç—ã–≥—Ä—ã—à–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Ç–≤–æ–∏—Ö —Ñ—Ä–∏–±–µ—Ç–æ–≤.\n\n', 
        reply_markup=keyboards.hello_keyboard(callback.from_user.id)
        )


async def feedback(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    await bot.send_message(
        callback.from_user.id,
        '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É *–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å*\n\n'
        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–µ–π –∏–¥–µ–µ–π –¥–ª—è —É—Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=keyboards.feedback_keyboard(),
        parse_mode='Markdown'
    )

async def payments(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    await bot.send_message(
        callback.from_user.id,
        '–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É *–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n*'
        '–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Å–≤–æ–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n\n'
        '–î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã –µ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–π–¥–∏ –ø–æ –∫–Ω–æ–ø–∫–µ —Ç–∞—Ä–∏—Ñ—ã\n\n'
        '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        parse_mode='Markdown',
        reply_markup=keyboards.payments_keyboard()

    )

async def tariffs_list(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    tariffs = get_tariffs()
    await bot.send_message(
        callback.from_user.id,
        '–ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ\n\n'
        '–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤:',
        reply_markup=keyboards.tariffs_keyboard(tariffs)
    )

async def retrieve_tariff(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    tariff = get_tariff(callback.data.split('_')[-2])
    await bot.send_photo(
        photo=tariff['photo'],
        chat_id=callback.from_user.id,
        caption = f'–¢–∞—Ä–∏—Ñ {callback.data.split('_')[-1]}\n\n'
        f'{tariff['description']}\n\n'
        f'*‚Äî –ü–µ—Ä–∏–æ–¥: {tariff['duration']}*\n\n'
        f'*‚Äî –¶–µ–Ω–∞: {tariff['cost']} RUB*',
        reply_markup=keyboards.tariff_keyboard(int(callback.data.split('_')[-2])),
        parse_mode="Markdown"
    )

async def tech_support(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    await bot.send_message(
        callback.from_user.id,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É',
        reply_markup=keyboards.cancel_keyboard()
    )
    await state.set_state(TechSupportState.GET_TEXT)

async def create_tech_support_report(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    await bot.send_message(
        message.from_user.id,
        '–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è —á–µ—Ä–µ–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º, –ø—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞',
        reply_markup=keyboards.cancel_keyboard()
        )
    create_tech_support_ticket(message.text, message.from_user.id)
    await bot.send_message(
        MANAGER,
        f'–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n'
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username}\n\n'
        f'{message.text}'
    )

async def update_ticket(callback: CallbackQuery, bot: Bot, state: FSMContext):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    await bot.send_message(
        callback.from_user.id,
        '–û–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        reply_markup=keyboards.cancel_keyboard()
    )
    await state.set_state(UpdateTicketState.GET_TICKET_TEXT)

async def create_update_ticket(message: Message, bot: Bot, state: FSMContext):
    await state.clear()
    create_update_support_ticket(message.text,message.from_user.id)
    await bot.send_message(
        message.from_user.id,
        '–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ –Ω–∞ –∑–∞–º–µ—Ç–∫—É, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞!',
        reply_markup=keyboards.cancel_keyboard()
        )

async def retrieve_subcription(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    subscribe = get_subscribe(callback.from_user.id)
    if subscribe:
        await bot.send_message(
            callback.from_user.id,
            f'üìï –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω: {subscribe['tariff']}\n\n'
            f'üóì –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {subscribe['remained_days']}\n\n'
            f'üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–∞—Ä–∏—Ñ–∞: {subscribe['cost']}',
            reply_markup=keyboards.back_to_payment_keyboard()
        )
        return
    await bot.send_message(
        callback.from_user.id,
        '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –¥–ª—è –µ—ë –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ç–∞—Ä–∏—Ñ—ã –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø—É/–∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
        reply_markup=keyboards.payments_keyboard()
    )

async def update_log(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    data = get_update_log()
    await bot.send_message(
        callback.from_user.id,
        f'–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç {data['created_at']}\n\n'
        f'{data['text']}',
        reply_markup=keyboards.cancel_keyboard()
    )

async def pre_create_purchase_request(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    tariff = get_tariff(callback.data.split('_')[-1])
    promocode = get_activated_promocode(callback.from_user.id, tariff_id=tariff['id'])
    amount = tariff['cost'] if not promocode else int(tariff['cost'])-promocode['discount']
    await bot.send_message(
        callback.from_user.id,
        f'üìï *–ü—Ä–æ–¥—É–∫—Ç:* –î–æ—Å—Ç—É–ø –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ Betting\n\n'
        f'üóì *–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω*: {tariff['title']}\n\n'
        f'‚Äî –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–π\n'
        f'‚Äî –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount}\n\n'
        '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø:\n\n'
        f'‚Äî –î–æ—Å—Ç—É–ø –∫ –≤–µ—Ä—Å–∏–∏ –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è % –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –Ω–∞ {tariff['duration']} –¥–Ω–µ–π/-—è\n\n '
        f'‚ÑπÔ∏è –û–ø–ª–∞—á–∏–≤–∞—è –ø–æ–¥–ø–∏—Å–∫—É, –í—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—Å–ª–æ–≤–∏—è [–ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã](https://cloud.mail.ru/public/XLFj/NkEbFv31J)',
        parse_mode='Markdown',
        reply_markup=keyboards.pre_purchace_keyboard(callback.data.split('_')[-1], amount)
    )

async def create_purchase_request(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    try:
        promo = get_activated_promocode(callback.from_user.id,callback.data.split('_')[-1])['id']
    except Exception:
        promo = None
    payment_id = create_purchase_tariff(tariff=callback.data.split('_')[-1],tg_id=callback.from_user.id,promo=promo)
    match payment_id:
        case False:
            await bot.send_message(
                callback.from_user.id,
                '–£ –≤–∞—Å –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –¥–µ–π—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞, –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª—É—á–∞–µ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                reply_markup=keyboards.cancel_keyboard()
            )
        case _:
            tariff = get_tariff(callback.data.split('_')[-1])
            await bot.send_message(
                callback.from_user.id,
                f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É —Ç–∞—Ä–∏—Ñ–∞ {tariff['title']} –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É, –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!',
                reply_markup=keyboards.cancel_keyboard()
            )
            await bot.send_message(
                GROUP_ID,
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ—Å—Ç–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ {tariff['title']}, —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ {callback.data.split('_')[-2]} RUB',
                message_thread_id=2,
                reply_markup=keyboards.purchase_request_keyboard(payment_id=payment_id, tg_id=callback.from_user.id)
            )

async def update_purchase_request(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    action = callback.data.split('_')[-3]
    update_purchase_status(payment_id=callback.data.split('_')[-1], action=action)
    match callback.data.split('_')[-3]:
        case 'cancel':
            await bot.send_message(
                GROUP_ID,
                f'–ó–∞—è–≤–∫–∞ ‚Ññ{callback.data.split('_')[-1]} –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞',
                message_thread_id=29
            )
            tariffs = get_tariffs()
            await bot.send_message(
                callback.data.split('_')[-2],
                f'–ü–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–º –ø—Ä–∏—á–∏–Ω–∞–º –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–µ–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                reply_markup=keyboards.tariffs_keyboard(tariffs=tariffs)
            )
        case 'accept':
            await bot.send_message(
                GROUP_ID,
                f'–ó–∞—è–≤–∫–∞ ‚Ññ{callback.data.split('_')[-1]} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞',
                message_thread_id=4
            )
            await bot.send_message(
                callback.data.split('_')[-2],
                f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–∫—É–ø–∫—É! –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–Ω—ã–º –ø–ª–∞–Ω–æ–º',
                reply_markup=keyboards.hello_keyboard(callback.from_user.id)
            )
            cache_profile(callback.data.split('_')[-2],'private')
            
async def activate_trial_period(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    activate_trial(callback.from_user.id, callback.data.split('_')[-1])
    await bot.send_message(
        callback.from_user.id,
        '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç–∞—Ä–∏—Ñ–∞, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!',
        reply_markup=keyboards.cancel_keyboard()
    )
    await bot.send_message(
        GROUP_ID,
        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username} –æ—Ñ–æ—Ä–º–∏–ª –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥',
        message_thread_id=6
    )

async def get_max_money_fork(bot: Bot):
    parsed_forks = parse_fork(MAX_MONEY_FORK_URL,5,'private')
    res = f'{datetime.datetime.now(pytz.timezone('Europe/Moscow')).strftime('%Y-%m-%d %H:%M:%S')} \n\n\n'
    for fork in parsed_forks:
        res += generate_fork_message(fork) + '\n\n\n' + '---------------------' + '\n\n\n'
    
    await bot.send_message(
        FORK_CHAT_ID,
        res
    )

async def get_promocodes_list(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    tariff = get_tariff(callback.data.split('_')[-1])
    if get_promocodes_status(callback.data.split('_')[-1], callback.from_user.id):
        promocodes = get_promocodes(callback.data.split('_')[-1])
        if promocodes:
            await bot.send_message(
                callback.from_user.id,
                f'–î–æ—Å—Ç–ø—É–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–∞ {tariff['title']}',
                reply_markup=keyboards.promocodes_keyboard(promocodes,tariff)
            )
            return
        await bot.send_message(
            callback.from_user.id,
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤',
            reply_markup=keyboards.back_promocode_keyboard(tariff)
        )
        return
    await bot.send_message(
        callback.from_user.id,
        '–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, —Å–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –ø–æ–∫–∞ –∏–º –Ω–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –∫—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ!',
        reply_markup=keyboards.activated_promocode_keyboard(tariff['id'])
    )


async def retrieve_promocode_message(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    promocode = retrieve_promocode(callback.data.split('_')[-1])
    await bot.send_message(
        callback.from_user.id,
        f'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {promocode['promo']}\n\n'
        f'üí• –°–∫–∏–¥–∫–∞: {promocode['discount']} —Ä—É–±.\n\n'
        f'üèÉ –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promocode['remained']}\n\n'
        f'‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ—Å–ª–µ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏, –∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ–≥–æ, —á—Ç–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –Ω–µ —É—Å–ø–µ–µ—Ç –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫—Ç–æ-—Ç–æ –µ—â—ë',
        reply_markup=keyboards.activate_promocode_keyboard(promocode['id'], promocode['tariff'])
    )

async def activate_promocode_handler(callback: CallbackQuery, bot: Bot):
    await bot.answer_callback_query(callback.id)
    await callback.message.delete()
    activate_promocode(promo_id=callback.data.split('_')[-1], tg_id=callback.from_user.id)
    await bot.send_message(
            callback.from_user.id,
            'üí• –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!',
            reply_markup=keyboards.activated_promocode_keyboard(callback.data.split('_')[-2])
        )
    return


